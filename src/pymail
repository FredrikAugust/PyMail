#!/usr/bin/python

# -------------------------------------------------------

# This python email client is made by: Tijndagamer
# This code is simplified by Fredrik A. Madsen-Malmo
# Published under the MIT license

# -------------------------------------------------------


import smtplib
import imaplib
import sys
import time
import os

# -------------------------------------------------------

email_addr = ""
email_pass = ""
install_path = "/home/martijn/Coding/git/PyMail/src/"

# -------------------------------------------------------

# Functions

def send_email_from_terminal(use_sys_argv):
    """Set the mail-components from sysargv or from user input
    depending on if use_sys_argv is True or False. Send mail after
    setting variables.
    """

    if use_sys_argv:
    	# sysargv 2, 3, and 4
        to_addr, subject, body = [sys.argv[x] for x in range(2,5)]
    else:
        to_addr, subject, body = [raw_input(x + " = ") for x in ['Receiver address', 'Subject', 'Body']]

    send_mail(to_addr, subject, body, True)


def send_email_from_file(delete=False):
    """Gets the email components from a given file
    and sends an email with said components.
    Will also delete the file if the delete variable == True
    """

    to_addr, subject, body = None

    # This will assure that the file is closed
    with open(sys.argv[2], 'r') as file:
    	to_addr, subject, body = file.read().split('--- --- ---')

    # Remove newlines in address and subject
    to_addr, subject = [x.replace('\n', '') for x in [to_addr, subject]]

    send_mail(to_addr, subject, body, False)

    if delete:
    	# Delete the file
        os.popen("trash " + sys.argv[2])


def send_mail(to_addr, subject, body, verbose):
	"""Send an email to the specified to_addr, with
	a subject and a body. Will print extra information
	if verbose is passed in.
	"""

    header = "Subject: {}\n\n{}".format(subject, body)

    if verbose:
        print("Your email is:")
        print(header)
        print("Sending email...")

    s = smtplib.SMTP('smtp.gmail.com', 587)

    s.ehlo()
    s.starttls()
    s.ehlo()
    s.login(email_addr, email_pass)
    s.sendmail(email_addr, to_addr, header)
    s.quit

    if verbose:
        print("Email sent.")


def email_recv(use_sys_argv):
    """Connect to mail-server and login.
    After that select the inbox and get all emails.
    Finally get the latest email from a list of emails
    or `n`-th email if that is specified in sys_argvs"""

    # Connect and login
    mail = imaplib.IMAP4_SSL("imap.gmail.com")
    mail.login(email_addr, email_pass)

    # Select inbox
    mail.select("inbox")

    # Get the latest email id
    result, data = mail.search(None, "ALL")
    msg_id_list = data[0].split(' ')

    # If n is not given, get newest email (-1)
    if use_sys_argv:
    	n = int(sys.argv[2])
    else:
    	n = -1

    # Get the latest email or n-th email if that is specified
    result, data = mail.fetch(msg_id_list[n], "(RFC822)")

    # This is the raw email data
    print(data[0][1])


def get_email_pass():
	"""Get the email and password from the user.
	Turn off output to terminal for password.
	Returns a tuple with email and password.
	"""

	_email = raw_input("Email address = ")
    print("Email password = ")
    # Turn off output in terminal
    os.popen("stty -echo")
    # Get the password which whill not be shown
    _pass = raw_input()
    # Turn on output in terminal
    os.popen("stty echo")

    print("\n")

    return (_email, _pass)


def login():
    """Get account credentials from files or from user
    input if the file specified does not exist.
    """

    # Define global variables
    global email_addr
    global email_pass

    # If the file specified exists
    if os.path.isfile(install_path + "mailaddr"):
    	# Get the variables from the two files; install_path + mail(addr/pass)
    	email_addr, email_pass = [open(install_path + 'mail%s' % x).read() for x in ['addr', 'pass']]
    else:
        email_addr, email_pass = get_email_pass()


def config():
    """Get the credentials from the user and store them
    in install_path + mail(addr/pass).
    """

    # TODO: Implement encryption.
    print("BE AWARE THAT YOUR CREDENTIALS WILL NOT BE ENCRYPTED.")

    email_addr, email_pass = get_email_pass()

    # List comprehensions are awesome
    # Pretty self-explanatory, but saves the email and pass to the files
    [open(install_path + 'mail%s' % x, 'w').write(y) for x, y in [['addr', email_addr], ['pass', email_pass]]]


def pymail_help():
    """Prints basic help"""
    print("Usage:")
    print("pymail help")
    print("pymail config")
    print("pymail send")
    print("pymail send <receiver> <subject> <body>")
    print("pymail receive")
    print("pymail receive <n>")
    print("pymail file <file> <delete_concept (y/n)>")
    print("For more help, see README.md")

# -------------------------------------------------------

# init

if len(sys.argv) < 2:
    pymail_help()
elif sys.argv[1] == "send":
    login()
    if len(sys.argv) > 2:
        send_email_from_terminal(True)
    else:
        send_email_from_terminal(False)
elif sys.argv[1] == "receive":
    login()
    if len(sys.argv) > 2:
        email_recv(True)
    else:
        email_recv(False)
elif sys.argv[1] == "file":
    login()
    if sys.argv[3] == "y":
        send_email_from_file(True);
    else:
        send_email_from_file(False);

elif sys.argv[1] == "help":
    pymail_help()
elif sys.argv[1] == "config":
    config()
else:
    pymail_help()



#!/usr/bin/python

# -------------------------------------------------------

# This python email client is made by: Tijndagamer
# This code is simplified by Fredrik A. Madsen-Malmo
# Published under the MIT license

# -------------------------------------------------------


import smtplib
import imaplib
import sys
import time
import os

# -------------------------------------------------------

email_addr = ""
email_pass = ""
install_path = "/home/martijn/Coding/git/PyMail/src/"

# -------------------------------------------------------

# Functions

def send_email_from_terminal(use_sys_argv):
    """Set the mail-components from sysargv or from user input
    depending on if use_sys_argv is True or False. Send mail after
    setting variables.
    """

    if use_sys_argv:
    	# sysargv 2, 3, and 4
        to_addr, subject, body = [sys.argv[x] for x in range(2,5)]
    else:
        to_addr, subject, body = [raw_input(x + " = ") for x in ['Receiver address', 'Subject', 'Body']]

    send_mail(to_addr, subject, body, True)


def send_email_from_file(delete=False):
    """Gets the email components from a given file
    and sends an email with said components.
    Will also delete the file if the delete variable == True
    """

    to_addr, subject, body = None

    # This will assure that the file is closed
    with open(sys.argv[2], 'r') as file:
    	to_addr, subject, body = file.read().split('--- --- ---')

    # Remove newlines in address and subject
    to_addr, subject = [x.replace('\n', '') for x in [to_addr, subject]]

    send_mail(to_addr, subject, body, False)

    if delete:
    	# Delete the file
        os.popen("trash " + sys.argv[2])


def send_mail(to_addr, subject, body, verbose):
    header = "Subject: {}\n\n{}".format(subject, body)

    if verbose:
        print("Your email is:")
        print(header)
        print("Sending email...")

    s = smtplib.SMTP('smtp.gmail.com', 587)

    s.ehlo()
    s.starttls()
    s.ehlo()
    s.login(email_addr, email_pass)
    s.sendmail(email_addr, to_addr, header)
    s.quit

    if verbose:
        print("Email sent.")


def email_recv(use_sys_argv):
    """Receive the newest or given email"""
    # Connect and login
    mail = imaplib.IMAP4_SSL("imap.gmail.com")
    mail.login(email_addr, email_pass)

    # Select inbox
    mail.select("inbox")

    # Get the latest email id
    result, data = mail.search(None, "ALL")
    msg_ids = data[0]
    msg_id_list = msg_ids.split(' ')

    # If n is not given, get newest email (-1)
    if use_sys_argv == False:
        n = -1
    elif use_sys_argv == True:
        n = int(sys.argv[2])

    email_id = msg_id_list[n]

    # Get the latest email
    result, data = mail.fetch(email_id, "(RFC822)")
    raw_email = data[0][1]

    print(raw_email)


def login():
    """Get account credentials"""
    global email_addr
    global email_pass
    if os.path.isfile(install_path + "mailaddr") == True:
        mail_addr_file = open(install_path + "mailaddr", 'r')
        email_addr = mail_addr_file.read()
        mail_pass_file = open(install_path + "mailpass", 'r')
        email_pass = mail_pass_file.read()
    else:
        email_addr = raw_input("Email address = ")
        print("Email password = "),
        os.popen("stty -echo")
        email_pass = raw_input()
        os.popen("stty echo")
        print("\n")


def config():
    """Get and save account credentials"""
    print("BE AWARE THAT YOUR CREDENTIALS WILL NOT BE ENCRYPTED.")
    email_addr = raw_input("Email address = ")

    print("Email password = "),
    os.popen("stty -echo")
    email_pass = raw_input()
    os.popen("stty echo")
    print("\n")

    mail_addr_file = open("mailaddr", 'w')
    mail_pass_file = open("mailpass", 'w')

    mail_addr_file.write(email_addr)
    mail_pass_file.write(email_pass)


def pymail_help():
    """Prints basic help"""
    print("Usage:")
    print("pymail help")
    print("pymail config")
    print("pymail send")
    print("pymail send <receiver> <subject> <body>")
    print("pymail receive")
    print("pymail receive <n>")
    print("pymail file <file> <delete_concept (y/n)>")
    print("For more help, see README.md")

# -------------------------------------------------------

# init

if len(sys.argv) < 2:
    pymail_help()
elif sys.argv[1] == "send":
    login()
    if len(sys.argv) > 2:
        send_email_from_terminal(True)
    else:
        send_email_from_terminal(False)
elif sys.argv[1] == "receive":
    login()
    if len(sys.argv) > 2:
        email_recv(True)
    else:
        email_recv(False)
elif sys.argv[1] == "file":
    login()
    if sys.argv[3] == "y":
        send_email_from_file(True);
    else:
        send_email_from_file(False);

elif sys.argv[1] == "help":
    pymail_help()
elif sys.argv[1] == "config":
    config()
else:
    pymail_help()


